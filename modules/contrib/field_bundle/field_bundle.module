<?php

/**
 * @file
 * Provides a field bundle entity type.
 */

use Drupal\Core\Entity\Sql\SqlEntityStorageInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function field_bundle_theme() {
  return [
    'field_bundle' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for field bundle templates.
 *
 * Default template: field-bundle.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the field bundle information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_field_bundle(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function field_bundle_theme_suggestions_field_bundle(array $variables) {
  $suggestions = [];
  /** @var \Drupal\field_bundle\FieldBundleInterface $field_bundle */
  $field_bundle = $variables['elements']['#field_bundle'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'field_bundle__' . $sanitized_view_mode;
  $suggestions[] = 'field_bundle__' . $field_bundle->bundle();
  $suggestions[] = 'field_bundle__' . $field_bundle->bundle() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function field_bundle_inline_entity_form_entity_form_alter(array &$entity_form, FormStateInterface &$form_state) {
  if (isset($entity_form['#entity_type']) && $entity_form['#entity_type'] === 'field_bundle') {
    /** @var \Drupal\field_bundle\FieldBundleInterface $field_bundle */
    $field_bundle = $entity_form['#entity'];
    $form_class = $field_bundle->getEntityType()->getFormClass('default');
    $entity_form['#entity_builders']['apply_label_pattern'] = [
      $form_class,
      'applyLabelPattern',
    ];
  }
}

/**
 * Implements hook_entity_type_build().
 */
function field_bundle_entity_type_build(array &$entity_types) {
  if (!isset($entity_types['field_bundle'])) {
    return;
  }
  /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
  $entity_type = $entity_types['field_bundle'];
  $module_handler = \Drupal::moduleHandler();

  if ($module_handler->moduleExists('content_translation')) {
    $entity_type->setHandlerClass('translation', 'Drupal\content_translation\ContentTranslationHandler');
    $entity_type->set('content_translation_metadata', 'Drupal\content_translation\ContentTranslationMetadataWrapper');
    $entity_type->setFormClass('content_translation_deletion', '\Drupal\content_translation\Form\ContentTranslationDeleteForm');

    $translation = $entity_type->get('translation');
    if (!$translation || !isset($translation['content_translation'])) {
      $translation['content_translation'] = [];
    }

    // Provide default route names for the translation paths.
    $translations_path = '/field-bundle/{field_bundle}/translations';
    $entity_type->setLinkTemplate('drupal:content-translation-overview', $translations_path);
    $entity_type->setLinkTemplate('drupal:content-translation-add', $translations_path . '/add/{source}/{target}');
    $entity_type->setLinkTemplate('drupal:content-translation-edit', $translations_path . '/edit/{language}');
    $entity_type->setLinkTemplate('drupal:content-translation-delete', $translations_path . '/delete/{language}');

    // @todo Remove this as soon as menu access checks rely on the
    //   controller. See https://www.drupal.org/node/2155787.
    $translation['content_translation'] += [
      'access_callback' => 'content_translation_translate_access',
    ];
    $entity_type->set('translation', $translation);
  }

  if ($module_handler->moduleExists('entity')) {
    // Use contrib Entity API's enhanced handler for views data.
    $entity_type->setHandlerClass('views_data', 'Drupal\entity\EntityViewsData');
    // Also use contrib Entity API's query access handler.
    if (is_subclass_of($entity_type->getStorageClass(), SqlEntityStorageInterface::class)) {
      // Query access only works for SQL storages.
      $entity_type->setHandlerClass('query_access', 'Drupal\field_bundle\QueryAccess\FieldBundleQueryAccessHandler');
    }
  }
}
